// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import { Ent, ID, Viewer } from "@snowtop/ent";
import {
  Action,
  Builder,
  Changeset,
  Orchestrator,
  WriteOperation,
  saveBuilder,
  saveBuilderX,
} from "@snowtop/ent/action";
import { User, UserAuthentication } from "src/ent/";
import { EdgeType, NodeType } from "src/ent/const";
import schema from "src/schema/user_authentication";

export interface UserAuthenticationInput {
  emailAddress?: string;
  password?: string;
  userID?: ID | Builder<User>;
}

export interface UserAuthenticationAction extends Action<UserAuthentication> {
  getInput(): UserAuthenticationInput;
}

function randomNum(): string {
  return Math.random().toString(10).substring(2);
}

export class UserAuthenticationBuilder implements Builder<UserAuthentication> {
  orchestrator: Orchestrator<UserAuthentication>;
  readonly placeholderID: ID;
  readonly ent = UserAuthentication;
  private input: UserAuthenticationInput;

  public constructor(
    public readonly viewer: Viewer,
    public readonly operation: WriteOperation,
    action: UserAuthenticationAction,
    public readonly existingEnt?: UserAuthentication | undefined,
  ) {
    this.placeholderID = `$ent.idPlaceholderID$ ${randomNum()}-UserAuthentication`;
    this.input = action.getInput();

    this.orchestrator = new Orchestrator({
      viewer: viewer,
      operation: this.operation,
      tableName: "user_authentications",
      key: "id",
      loaderOptions: UserAuthentication.loaderOptions(),
      builder: this,
      action: action,
      schema: schema,
      editedFields: () => {
        return this.getEditedFields.apply(this);
      },
    });
  }

  getInput(): UserAuthenticationInput {
    return this.input;
  }

  updateInput(input: UserAuthenticationInput) {
    // override input
    this.input = {
      ...this.input,
      ...input,
    };
  }

  async build(): Promise<Changeset<UserAuthentication>> {
    return this.orchestrator.build();
  }

  async valid(): Promise<boolean> {
    return this.orchestrator.valid();
  }

  async validX(): Promise<void> {
    return this.orchestrator.validX();
  }

  async save(): Promise<void> {
    await saveBuilder(this);
  }

  async saveX(): Promise<void> {
    await saveBuilderX(this);
  }

  async editedEnt(): Promise<UserAuthentication | null> {
    return await this.orchestrator.editedEnt();
  }

  async editedEntX(): Promise<UserAuthentication> {
    return await this.orchestrator.editedEntX();
  }

  private getEditedFields(): Map<string, any> {
    const fields = this.input;

    let result = new Map<string, any>();

    const addField = function (key: string, value: any) {
      if (value !== undefined) {
        result.set(key, value);
      }
    };
    addField("EmailAddress", fields.emailAddress);
    addField("Password", fields.password);
    addField("userID", fields.userID);
    if (fields.userID) {
      this.orchestrator.addInboundEdge(
        fields.userID,
        EdgeType.UserToAuthenticationDetails,
        NodeType.User,
      );
    }
    return result;
  }

  isBuilder(node: ID | Ent | Builder<Ent>): node is Builder<Ent> {
    return (node as Builder<Ent>).placeholderID !== undefined;
  }

  // get value of EmailAddress. Retrieves it from the input if specified or takes it from existingEnt
  getNewEmailAddressValue(): string | undefined {
    return this.input.emailAddress || this.existingEnt?.emailAddress;
  }

  // get value of Password. Retrieves it from the input if specified or takes it from existingEnt
  getNewPasswordValue(): string | undefined {
    return this.input.password;
  }

  // get value of userID. Retrieves it from the input if specified or takes it from existingEnt
  getNewUserIDValue(): ID | Builder<User> | undefined {
    return this.input.userID || this.existingEnt?.userID;
  }
}
