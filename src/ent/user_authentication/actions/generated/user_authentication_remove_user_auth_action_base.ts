// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AllowIfViewerHasIdentityPrivacyPolicy,
  ID,
  PrivacyPolicy,
  Viewer,
} from "@snowtop/ent";
import { Action, Changeset, WriteOperation } from "@snowtop/ent/action";
import { User, UserAuthentication } from "src/ent/";
import {
  UserAuthenticationBuilder,
  UserAuthenticationInput,
} from "src/ent/user_authentication/actions/user_authentication_builder";

export class UserAuthenticationRemoveUserAuthActionBase
  implements Action<UserAuthentication>
{
  public readonly builder: UserAuthenticationBuilder;
  public readonly viewer: Viewer;
  protected userAuthentication: UserAuthentication;

  constructor(viewer: Viewer, userAuthentication: UserAuthentication) {
    this.viewer = viewer;
    this.builder = new UserAuthenticationBuilder(
      this.viewer,
      WriteOperation.Edit,
      this,
      userAuthentication,
    );
    this.userAuthentication = userAuthentication;
  }

  getPrivacyPolicy(): PrivacyPolicy {
    return AllowIfViewerHasIdentityPrivacyPolicy;
  }

  getInput(): UserAuthenticationInput {
    return {};
  }

  removeUserAuth(...ids: ID[]): this;
  removeUserAuth(...nodes: User[]): this;
  removeUserAuth(...nodes: ID[] | User[]): this {
    nodes.forEach((node) => this.builder.removeUserAuth(node));
    return this;
  }
  async changeset(): Promise<Changeset<UserAuthentication>> {
    return this.builder.build();
  }

  async valid(): Promise<boolean> {
    return this.builder.valid();
  }

  async validX(): Promise<void> {
    await this.builder.validX();
  }

  async save(): Promise<UserAuthentication | null> {
    await this.builder.save();
    return await this.builder.editedEnt();
  }

  async saveX(): Promise<UserAuthentication> {
    await this.builder.saveX();
    return await this.builder.editedEntX();
  }

  static create<T extends UserAuthenticationRemoveUserAuthActionBase>(
    this: new (viewer: Viewer, userAuthentication: UserAuthentication) => T,
    viewer: Viewer,
    userAuthentication: UserAuthentication,
  ): UserAuthenticationRemoveUserAuthActionBase {
    return new this(viewer, userAuthentication);
  }

  static async saveXFromID<
    T extends UserAuthenticationRemoveUserAuthActionBase,
  >(
    this: new (viewer: Viewer, userAuthentication: UserAuthentication) => T,
    viewer: Viewer,
    id: ID,
    userAuthID: ID,
  ): Promise<UserAuthentication> {
    let userAuthentication = await UserAuthentication.loadX(viewer, id);
    return await new this(viewer, userAuthentication)
      .removeUserAuth(userAuthID)
      .saveX();
  }
}
