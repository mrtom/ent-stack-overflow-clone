// Generated by github.com/lolopinto/ent/ent, DO NOT EDIT.

import {
  AssocEdgeCountLoaderFactory,
  AssocEdgeLoaderFactory,
  AssocEdgeQueryBase,
  EdgeQuerySource,
  Viewer,
} from "@snowtop/ent";
import {
  Answer,
  AnswerToAuthorsQuery,
  AnswerToCommentsQuery,
  AnswerToVotesQuery,
  EdgeType,
  Question,
  QuestionComment,
  QuestionCommentToAuthorsQuery,
  QuestionPrivateNote,
  QuestionPrivateNoteToAuthorsQuery,
  QuestionToAnswersEdge,
  QuestionToAuthorsEdge,
  QuestionToCommentsEdge,
  QuestionToPrivateNotesEdge,
  QuestionToVotesEdge,
  QuestionVote,
  QuestionVoteToVotersQuery,
  User,
  UserToAnswersVotedQuery,
  UserToAuthenticationDetailsQuery,
  UserToAuthorToAuthoredAnswerCommentsQuery,
  UserToAuthorToAuthoredAnswersQuery,
  UserToAuthorToAuthoredQuestionCommentsQuery,
  UserToAuthorToAuthoredQuestionsQuery,
  UserToAuthoredAnswerCommentsQuery,
  UserToAuthoredAnswersQuery,
  UserToAuthoredQuestionCommentsQuery,
  UserToAuthoredQuestionsQuery,
  UserToQuestionPrivateNotesQuery,
  UserToQuestionsVotedQuery,
  UserToUserQuestionPrivateNotesQuery,
  UserToVoterToAnswersVotedQuery,
  UserToVoterToQuestionsVotedQuery,
} from "src/ent/internal";

export const questionToAnswersCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.QuestionToAnswers);
export const questionToAnswersDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.QuestionToAnswers,
  () => QuestionToAnswersEdge,
);

export const questionToAuthorsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.QuestionToAuthors);
export const questionToAuthorsDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.QuestionToAuthors,
  () => QuestionToAuthorsEdge,
);

export const questionToCommentsCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.QuestionToComments);
export const questionToCommentsDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.QuestionToComments,
  () => QuestionToCommentsEdge,
);

export const questionToPrivateNotesCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.QuestionToPrivateNotes);
export const questionToPrivateNotesDataLoaderFactory =
  new AssocEdgeLoaderFactory(
    EdgeType.QuestionToPrivateNotes,
    () => QuestionToPrivateNotesEdge,
  );

export const questionToVotesCountLoaderFactory =
  new AssocEdgeCountLoaderFactory(EdgeType.QuestionToVotes);
export const questionToVotesDataLoaderFactory = new AssocEdgeLoaderFactory(
  EdgeType.QuestionToVotes,
  () => QuestionToVotesEdge,
);

export class QuestionToAnswersQueryBase extends AssocEdgeQueryBase<
  Question,
  Answer,
  QuestionToAnswersEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Question>) {
    super(
      viewer,
      src,
      questionToAnswersCountLoaderFactory,
      questionToAnswersDataLoaderFactory,
      Answer.loaderOptions(),
    );
  }

  static query<T extends QuestionToAnswersQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Question>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Question>,
  ): T {
    return new this(viewer, src);
  }

  queryAuthors(): AnswerToAuthorsQuery {
    return AnswerToAuthorsQuery.query(this.viewer, this);
  }

  queryComments(): AnswerToCommentsQuery {
    return AnswerToCommentsQuery.query(this.viewer, this);
  }

  queryVotes(): AnswerToVotesQuery {
    return AnswerToVotesQuery.query(this.viewer, this);
  }
}

export class QuestionToAuthorsQueryBase extends AssocEdgeQueryBase<
  Question,
  User,
  QuestionToAuthorsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Question>) {
    super(
      viewer,
      src,
      questionToAuthorsCountLoaderFactory,
      questionToAuthorsDataLoaderFactory,
      User.loaderOptions(),
    );
  }

  static query<T extends QuestionToAuthorsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Question>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Question>,
  ): T {
    return new this(viewer, src);
  }

  queryAnswersVoted(): UserToAnswersVotedQuery {
    return UserToAnswersVotedQuery.query(this.viewer, this);
  }

  queryAuthenticationDetails(): UserToAuthenticationDetailsQuery {
    return UserToAuthenticationDetailsQuery.query(this.viewer, this);
  }

  queryAuthorToAuthoredAnswerComments(): UserToAuthorToAuthoredAnswerCommentsQuery {
    return UserToAuthorToAuthoredAnswerCommentsQuery.query(this.viewer, this);
  }

  queryAuthorToAuthoredAnswers(): UserToAuthorToAuthoredAnswersQuery {
    return UserToAuthorToAuthoredAnswersQuery.query(this.viewer, this);
  }

  queryAuthorToAuthoredQuestionComments(): UserToAuthorToAuthoredQuestionCommentsQuery {
    return UserToAuthorToAuthoredQuestionCommentsQuery.query(this.viewer, this);
  }

  queryAuthorToAuthoredQuestions(): UserToAuthorToAuthoredQuestionsQuery {
    return UserToAuthorToAuthoredQuestionsQuery.query(this.viewer, this);
  }

  queryAuthoredAnswerComments(): UserToAuthoredAnswerCommentsQuery {
    return UserToAuthoredAnswerCommentsQuery.query(this.viewer, this);
  }

  queryAuthoredAnswers(): UserToAuthoredAnswersQuery {
    return UserToAuthoredAnswersQuery.query(this.viewer, this);
  }

  queryAuthoredQuestionComments(): UserToAuthoredQuestionCommentsQuery {
    return UserToAuthoredQuestionCommentsQuery.query(this.viewer, this);
  }

  queryAuthoredQuestions(): UserToAuthoredQuestionsQuery {
    return UserToAuthoredQuestionsQuery.query(this.viewer, this);
  }

  queryQuestionPrivateNotes(): UserToQuestionPrivateNotesQuery {
    return UserToQuestionPrivateNotesQuery.query(this.viewer, this);
  }

  queryQuestionsVoted(): UserToQuestionsVotedQuery {
    return UserToQuestionsVotedQuery.query(this.viewer, this);
  }

  queryUserQuestionPrivateNotes(): UserToUserQuestionPrivateNotesQuery {
    return UserToUserQuestionPrivateNotesQuery.query(this.viewer, this);
  }

  queryVoterToAnswersVoted(): UserToVoterToAnswersVotedQuery {
    return UserToVoterToAnswersVotedQuery.query(this.viewer, this);
  }

  queryVoterToQuestionsVoted(): UserToVoterToQuestionsVotedQuery {
    return UserToVoterToQuestionsVotedQuery.query(this.viewer, this);
  }
}

export class QuestionToCommentsQueryBase extends AssocEdgeQueryBase<
  Question,
  QuestionComment,
  QuestionToCommentsEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Question>) {
    super(
      viewer,
      src,
      questionToCommentsCountLoaderFactory,
      questionToCommentsDataLoaderFactory,
      QuestionComment.loaderOptions(),
    );
  }

  static query<T extends QuestionToCommentsQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Question>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Question>,
  ): T {
    return new this(viewer, src);
  }

  queryAuthors(): QuestionCommentToAuthorsQuery {
    return QuestionCommentToAuthorsQuery.query(this.viewer, this);
  }
}

export class QuestionToPrivateNotesQueryBase extends AssocEdgeQueryBase<
  Question,
  QuestionPrivateNote,
  QuestionToPrivateNotesEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Question>) {
    super(
      viewer,
      src,
      questionToPrivateNotesCountLoaderFactory,
      questionToPrivateNotesDataLoaderFactory,
      QuestionPrivateNote.loaderOptions(),
    );
  }

  static query<T extends QuestionToPrivateNotesQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Question>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Question>,
  ): T {
    return new this(viewer, src);
  }

  queryAuthors(): QuestionPrivateNoteToAuthorsQuery {
    return QuestionPrivateNoteToAuthorsQuery.query(this.viewer, this);
  }
}

export class QuestionToVotesQueryBase extends AssocEdgeQueryBase<
  Question,
  QuestionVote,
  QuestionToVotesEdge
> {
  constructor(viewer: Viewer, src: EdgeQuerySource<Question>) {
    super(
      viewer,
      src,
      questionToVotesCountLoaderFactory,
      questionToVotesDataLoaderFactory,
      QuestionVote.loaderOptions(),
    );
  }

  static query<T extends QuestionToVotesQueryBase>(
    this: new (viewer: Viewer, src: EdgeQuerySource<Question>) => T,
    viewer: Viewer,
    src: EdgeQuerySource<Question>,
  ): T {
    return new this(viewer, src);
  }

  queryVoters(): QuestionVoteToVotersQuery {
    return QuestionVoteToVotersQuery.query(this.viewer, this);
  }
}
